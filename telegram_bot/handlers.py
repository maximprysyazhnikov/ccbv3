# telegram_bot/handlers.py
from __future__ import annotations
import asyncio, time, math, logging, json, re
from typing import Tuple, Optional, Dict, List
from datetime import datetime, timedelta
from zoneinfo import ZoneInfo

from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ContextTypes

from core_config import (
    MONITORED_SYMBOLS,
    ANALYZE_TIMEFRAME, ANALYZE_LIMIT,  # –ª–∏—à–∞—î–º–æ (–ª—ñ–º—ñ—Ç —Å–≤—ñ—á–æ–∫ –¥–ª—è —Ñ–µ—Ç—á—É)
    TZ_NAME,
    OPENROUTER_API_KEY, OPENROUTER_MODEL,
    LOCAL_LLM_MODEL,
    # ‚¨áÔ∏è –¥–æ–¥–∞–Ω–æ
    ANALYZE_BARS,          # —Å–∫—ñ–ª—å–∫–∏ –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –±–∞—Ä—ñ–≤ –±–µ—Ä–µ–º–æ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç LLM
    COMPACT_MODE,          # –∫–æ–º–ø–∞–∫—Ç–Ω–∏–π/–ø–æ–≤–Ω–∏–π —Ä–µ–∂–∏–º –ø—Ä–æ–º–ø—Ç–∞
)

# –î–∞–Ω—ñ/TA
from market_data.binance_data import get_ohlcv, get_latest_price
from signal_tools.ta_calc import get_ta_indicators

# –Ü–Ω—à–µ
from utils.report_saver import save_report
from gpt_analyst.symbol_screener import get_top_symbols
from gpt_analyst.llm_client import chat

# ‚îÄ‚îÄ –°—É–º—ñ—Å–Ω–∏–π —ñ–º–ø–æ—Ä—Ç –∞–Ω–∞–ª—ñ–∑–∞—Ç–æ—Ä–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
_run_full_analysis = None
_analyze_symbol = None
try:
    # –ù–æ–≤–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç
    from gpt_analyst.full_analyzer import run_full_analysis as _run_full_analysis
except Exception:
    pass
try:
    # –°—Ç–∞—Ä–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç
    from gpt_analyst.full_analyzer import analyze_symbol as _analyze_symbol
except Exception:
    pass

log = logging.getLogger("tg.handlers")


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# UI / –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def get_keyboard():
    return ReplyKeyboardMarkup(
        [["/top", "/analyze", "/ai"], ["/news", "/ping", "/help", "/guide"]],  # /ai ‚Äî –≥–æ–ª–æ–≤–Ω–∏–π –∞–Ω–∞–ª—ñ—Ç–∏–∫
        resize_keyboard=True
    )


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –•–µ–ª–ø–µ—Ä–∏
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def _current_ai_model() -> str:
    try:
        if (OPENROUTER_API_KEY or "").strip():
            return str(OPENROUTER_MODEL or "").strip() or "unknown"
        return str(LOCAL_LLM_MODEL or "").strip() or "unknown"
    except Exception:
        return "unknown"

def _tf_minutes(tf: str) -> int:
    t = (tf or "").strip().lower()
    if t.endswith("m"): return int(t[:-1])
    if t.endswith("h"): return int(t[:-1]) * 60
    if t.endswith("d"): return int(t[:-1]) * 60 * 24
    return 15

_VALID_DIR_WORDS = {"LONG", "SHORT", "NEUTRAL"}

def _looks_like_symbol(s: str) -> bool:
    s = (s or "").strip().upper()
    if not (2 <= len(s) <= 20): return False
    if not all(c.isalnum() for c in s): return False
    for q in ("USDT", "FDUSD", "USDC", "BUSD", "BTC", "ETH", "EUR", "TRY"):
        if s.endswith(q):
            return True
    return False

def _pick_default_symbol() -> str:
    try:
        for x in MONITORED_SYMBOLS:
            x = (x or "").strip().upper()
            if _looks_like_symbol(x):
                return x
    except Exception:
        pass
    return "BTCUSDT"

def _parse_ai_json(txt: str) -> dict:
    try:
        t = txt.strip()
        if t.startswith("```"):
            t = t.strip("` \n")
            t = t.replace("json\n", "", 1).replace("\njson", "").strip("` \n")
        data = json.loads(t)
        out = {
            "direction": str(data.get("direction", "")).upper(),
            "entry": float(data.get("entry", "nan")),
            "stop": float(data.get("stop", "nan")),
            "tp": float(data.get("tp", "nan")),
            "confidence": float(data.get("confidence", 0.0)),
            "holding_time_hours": float(data.get("holding_time_hours", 0.0)),
            "holding_time": str(data.get("holding_time", "")).strip(),
            "rationale": str(data.get("rationale", "")).strip(),
        }
        return out
    except Exception:
        dir_m = re.search(r"\b(LONG|SHORT|NEUTRAL)\b", txt, re.I)
        def num(key_regex):
            m = re.search(key_regex + r"\s*[:=]\s*([0-9]+(?:\.[0-9]+)?)", txt, re.I)
            return float(m.group(1)) if m else float("nan")
        return {
            "direction": dir_m.group(1).upper() if dir_m else "NEUTRAL",
            "entry": num(r"(?:entry|price)"),
            "stop": num(r"(?:stop(?:-|\s*)loss|sl)"),
            "tp":   num(r"(?:take(?:-|\s*)profit|tp)"),
            "confidence": 0.5,
            "holding_time_hours": 0.0,
            "holding_time": "",
            "rationale": txt.strip()
        }

def _fmt_or_dash(v):
    try:
        return f"{float(v):.2f}"
    except Exception:
        return "-"

def _rr(direction: str, entry: float, stop: float, tp: float) -> str:
    try:
        if any(math.isnan(x) for x in [entry, stop, tp]):
            return "-"
        if direction == "LONG":
            risk = entry - stop
            reward = tp - entry
        elif direction == "SHORT":
            risk = stop - entry
            reward = entry - tp
        else:
            return "-"
        if risk <= 0 or reward <= 0:
            return "-"
        return f"{reward/risk:.2f}"
    except Exception:
        return "-"


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –°–µ—Ä–≤—ñ—Å–Ω—ñ
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –ü—Ä–∏–≤—ñ—Ç! –Ø —Ç—Ä–µ–π–¥-–±–æ—Ç. –ö–æ–º–∞–Ω–¥–∏ –Ω–∏–∂—á–µ.", reply_markup=get_keyboard())

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ö–æ–º–∞–Ω–¥–∏:\n"
        "/top ‚Äî —Ç–æ–ø-20 –º–æ–Ω–µ—Ç –∑–∞ —Å–∫–æ—Ä–æ–º (–≤–µ—Å—å Binance), —à–≤–∏–¥–∫–∏–π –¥–∞–π–¥–∂–µ—Å—Ç\n"
        f"/analyze ‚Äî –ø–æ–≤–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –ø–æ MONITORED_SYMBOLS (TF={ANALYZE_TIMEFRAME})\n"
        "/ai <SYMBOL> [TF] ‚Äî —Ä–æ–∑–≥–æ—Ä–Ω—É—Ç–∏–π AI-–ø–ª–∞–Ω (entry/SL/TP, RR, —á–∞—Å —É—Ç—Ä–∏–º–∞–Ω–Ω—è)\n"
        "/news ‚Äî –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∑ –∫—Ä–∏–ø—Ç–æ-RSS\n"
        "/ping ‚Äî –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞\n"
        "/guide ‚Äî —è–∫ —á–∏—Ç–∞—Ç–∏ AI-–ø–ª–∞–Ω\n\n"
        f"–ê–∫—Ç–∏–≤–Ω–∞ AI-–º–æ–¥–µ–ª—å: {_current_ai_model()}"
    )

async def guide(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "üìñ *–Ø–∫ —á–∏—Ç–∞—Ç–∏ AI-–ø–ª–∞–Ω*\n\n"
        f"–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: `/ai BTCUSDT` ‚Äî –∞–Ω–∞–ª—ñ–∑—É—î —Ä–∏–Ω–∫–æ–≤—ñ –¥–∞–Ω—ñ –Ω–∞ TF={ANALYZE_TIMEFRAME} —ñ –ø–æ–≤–µ—Ä—Ç–∞—î –ø–ª–∞–Ω.\n\n"
        "üìå *–ü–æ–ª—è:*\n"
        "- *Direction* ‚Äì LONG/SHORT/NEUTRAL (–Ω–∞–ø—Ä—è–º —ñ–¥–µ—ó)\n"
        "- *Confidence* ‚Äì –≤–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å (0‚Äì1)\n"
        "- *RR* ‚Äì —Ä–∏–∑–∏–∫/–ø—Ä–∏–±—É—Ç–æ–∫ (>1.5 –¥–æ–±—Ä–µ, 2.0+ –∫—Ä–∞—â–µ)\n"
        "- *Entry / SL / TP* ‚Äì —Ä—ñ–≤–Ω—ñ –≤—Ö–æ–¥—É/—Å—Ç–æ–ø—É/—Ç–µ–π–∫—É\n"
        "- *Recommended hold* ‚Äì —Å–∫—ñ–ª—å–∫–∏ —Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–∑–∏—Ü—ñ—é —Ç–∞ –¥–µ–¥–ª–∞–π–Ω —É —Ç–≤–æ—î–º—É time zone\n"
        "- *‚Äî –ø–æ—è—Å–Ω–µ–Ω–Ω—è ‚Äî* ‚Äì –∫–æ—Ä–æ—Ç–∫–∞ –ª–æ–≥—ñ–∫–∞ —Ä—ñ—à–µ–Ω–Ω—è\n\n"
        "üí° *–ü–æ—Ä–∞–¥–∏:*\n"
        "‚Ä¢ –Ø–∫—â–æ RR < 1.5 ‚Äî –∫—Ä–∞—â–µ –ø–æ—à—É–∫–∞—Ç–∏ –∫—Ä–∞—â—É —Ç–æ—á–∫—É –≤—Ö–æ–¥—É.\n"
        "‚Ä¢ –î–∏–≤–∏—Å—å –Ω–∞ EMA50/EMA200 (—Ç—Ä–µ–Ω–¥) —Ç–∞ ADX (—Å–∏–ª–∞ —Ç—Ä–µ–Ω–¥—É).\n"
        "‚Ä¢ RSI/StochRSI ‚Äî –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó —ñ–º–ø—É–ª—å—Å—ñ–≤.\n"
    )
    await update.message.reply_text(text, parse_mode="Markdown")

async def ping(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(f"üèì pong all ok | AI model: {_current_ai_model()}")


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# NEWS (–æ–ø—Ü—ñ–π–Ω–æ)
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def news(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        from market_data.news import get_latest_news
        items = get_latest_news(limit=8)
        if not items:
            await update.message.reply_text("üì∞ –ù–µ–º–∞—î —Å–≤—ñ–∂–∏—Ö –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤ –∑–∞—Ä–∞–∑.")
            return
        lines = ["üì∞ –û—Å—Ç–∞–Ω–Ω—ñ –∑–∞–≥–æ–ª–æ–≤–∫–∏:\n"]
        for it in items:
            lines.append(f"‚Ä¢ {it['title']} ‚Äî {it['link']}")
        text = "\n".join(lines)
        await update.message.reply_text(text[:4000])
    except Exception as e:
        log.exception("/news failed")
        await update.message.reply_text(f"‚ö†Ô∏è news error: {e}")


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# /top ‚Äî –¢–æ–ø-20 –ø–æ –≤—Å—å–æ–º—É Binance (–ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ + –∫–µ—à)
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
_TOP_CACHE: Dict[str, object] = {"text": "", "ts": 0.0, "busy": False}
TOP_TTL_SEC = 120
MAX_CONCURRENCY = 12
DETAIL_POOL_SIZE = 60

def _bias_from_row(row) -> str:
    try:
        rsi = float(row.get("rsi"))
        macd_d = float(row.get("macd")) - float(row.get("macd_signal"))
        sma7 = float(row.get("sma_7"))
        sma25 = float(row.get("sma_25"))
    except Exception:
        return "NEUTRAL"
    if sma7 > sma25 and macd_d > 0 and rsi >= 52: return "LONG"
    if sma7 < sma25 and macd_d < 0 and rsi <= 48: return "SHORT"
    return "NEUTRAL"

def _fmt_line(symbol: str, bias: str, price: float, rsi: float, macd_delta: float, atr_pct: Optional[float]) -> str:
    dot = "üü¢" if bias == "LONG" else "üî¥" if bias == "SHORT" else "‚ö™Ô∏è"
    atr_txt = "-" if (atr_pct is None or (isinstance(atr_pct, float) and math.isnan(atr_pct))) else f"{atr_pct:.3f}%"
    return f"{dot} {bias} {symbol}  | P={price:.4f}  | RSI={rsi:.1f}  | MACDŒî={macd_delta:.4f}  | ATR%={atr_txt}"

async def _detail_one(symbol: str) -> Optional[Tuple[str, str, float, float, float, Optional[float]]]:
    try:
        def _work():
            df = get_ohlcv(symbol, ANALYZE_TIMEFRAME, ANALYZE_LIMIT)
            if df is None or df.empty:
                return None
            inds = get_ta_indicators(df)
            last = inds.iloc[-1]
            price = float(last.get("close", 0.0))
            rsi = float(last.get("rsi", 50.0))
            macd_d = float(last.get("macd", 0.0)) - float(last.get("macd_signal", 0.0))
            atr = float(last.get("atr_14", 0.0))
            atr_pct = (atr / price * 100) if price else None
            bias = _bias_from_row(last)
            return (symbol, bias, price, rsi, macd_d, atr_pct)
        return await asyncio.to_thread(_work)
    except Exception:
        return None

async def _build_top_text() -> str:
    candidates = get_top_symbols(DETAIL_POOL_SIZE) or []
    if not candidates:
        return f"üèÜ –¢–æ–ø-20 –º–æ–Ω–µ—Ç –∑–∞ —Å–∫–æ—Ä–æ–º (TF={ANALYZE_TIMEFRAME})\n‚ö†Ô∏è –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –≤—ñ–¥–±–æ—Ä—É."

    sem = asyncio.Semaphore(MAX_CONCURRENCY)
    async def _guarded(sym):
        async with sem:
            return await _detail_one(sym)

    tasks = [asyncio.create_task(_guarded(s)) for s in candidates]
    results = [r for r in await asyncio.gather(*tasks) if r]

    def strength(row):
        _, bias, _, rsi, macd_d, atr_pct = row
        score = 0.0
        if bias == "LONG":
            score += 2.0 + max(0.0, min(1.0, (rsi - 50.0) / 20.0)) + max(0.0, min(1.0, macd_d)) * 0.5
        elif bias == "SHORT":
            score += 2.0 + max(0.0, min(1.0, (50.0 - rsi) / 20.0)) + max(0.0, min(1.0, -macd_d)) * 0.5
        else:
            score += 1.0
        if atr_pct and not math.isnan(atr_pct):
            score += min(1.0, atr_pct / 1.0) * 0.1
        return score

    results.sort(key=strength, reverse=True)
    top20 = results[:20]

    header = (
        f"üèÜ –¢–æ–ø-20 –º–æ–Ω–µ—Ç –∑–∞ —Å–∫–æ—Ä–æ–º (TF={ANALYZE_TIMEFRAME})\n"
        "üìä –ö–æ–ª–æ–Ω–∫–∏:\n"
        "P ‚Äî –æ—Å—Ç–∞–Ω–Ω—è —Ü—ñ–Ω–∞ (4 –∑–Ω–∞–∫–∏)\n"
        "RSI ‚Äî RSI(14), 0.1\n"
        "MACDŒî ‚Äî MACD ‚àí Signal, 4 –∑–Ω–∞–∫–∏\n"
        "ATR% ‚Äî ATR(14) / Price * 100, 3 –∑–Ω–∞–∫–∏\n"
        "Time ‚Äî Europe/Kyiv (—á–∞—Å –Ω–µ –¥—É–±–ª—é—î–º–æ –≤ —Ä—è–¥–∫–∞—Ö)\n"
    )
    body = "\n".join(_fmt_line(*r) for r in top20)
    return (header + "\n" + body)[:4000]

async def top(update: Update, context: ContextTypes.DEFAULT_TYPE):
    now = time.time()
    if (_TOP_CACHE["text"] and (now - float(_TOP_CACHE["ts"]) <= TOP_TTL_SEC)):
        await update.message.reply_text(_TOP_CACHE["text"])
        return

    await update.message.reply_text(f"‚è≥ –†–∞—Ö—É—é —Ç–æ–ø –ø–æ –≤—Å—å–æ–º—É Binance (TF={ANALYZE_TIMEFRAME})‚Ä¶ –ó–∞—á–µ–∫–∞–π –∫—ñ–ª—å–∫–∞ —Å–µ–∫—É–Ω–¥‚Ä¶")

    if _TOP_CACHE["busy"]:
        for _ in range(30):
            await asyncio.sleep(0.5)
            if (_TOP_CACHE["text"] and (time.time() - float(_TOP_CACHE["ts"]) <= TOP_TTL_SEC)):
                await update.message.reply_text(_TOP_CACHE["text"])
                return
        await update.message.reply_text("‚åõÔ∏è –î–∞–Ω—ñ —â–µ –≥–æ—Ç—É—é—Ç—å—Å—è ‚Äî –Ω–∞–¥—ñ—à–ª—é —è–∫ —Ç—ñ–ª—å–∫–∏ –±—É–¥—É—Ç—å –≥–æ—Ç–æ–≤—ñ.")
        return

    async def _compute_and_send(chat_id: int):
        try:
            _TOP_CACHE["busy"] = True
            text = await _build_top_text()
            _TOP_CACHE["text"] = text
            _TOP_CACHE["ts"] = time.time()
            await context.bot.send_message(chat_id=chat_id, text=text)
        except Exception as e:
            log.exception("top build failed")
            await context.bot.send_message(chat_id=chat_id, text=f"‚ö†Ô∏è top build error: {e}")
        finally:
            _TOP_CACHE["busy"] = False

    asyncio.create_task(_compute_and_send(update.effective_chat.id))


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# /analyze ‚Äî –ø–æ–≤–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –ø–æ MONITORED_SYMBOLS (–ø—ñ–¥—Ç—Ä–∏–º–∫–∞ –¥–≤–æ—Ö API)
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def analyze(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(f"‚è≥ –ê–Ω–∞–ª—ñ–∑—É—é –Ω–∞ TF={ANALYZE_TIMEFRAME}‚Ä¶ –ó–∞—á–µ–∫–∞–π –∫—ñ–ª—å–∫–∞ —Å–µ–∫—É–Ω–¥‚Ä¶")
    for s in MONITORED_SYMBOLS:
        try:
            text_out = None
            if _run_full_analysis:
                # –æ—á—ñ–∫—É–≤–∞–Ω—ñ —Å–∏–≥–Ω–∞—Ç—É—Ä–∏: (symbol, timeframe) –∞–±–æ (symbol,)
                try:
                    res = _run_full_analysis(s, ANALYZE_TIMEFRAME)
                except TypeError:
                    res = _run_full_analysis(s)
                text_out = "\n".join(res) if isinstance(res, (list, tuple)) else str(res)
            elif _analyze_symbol:
                res = _analyze_symbol(s)
                text_out = str(res)
            else:
                text_out = "‚ö†Ô∏è –ù–µ–º–∞—î –Ω—ñ run_full_analysis, –Ω—ñ analyze_symbol —É gpt_analyst.full_analyzer."

            if text_out:
                save_report(s, text_out)
                await update.message.reply_text(text_out[:4000], parse_mode="Markdown")
        except Exception as e:
            log.exception("analyze %s failed", s)
            await update.message.reply_text(f"‚ö†Ô∏è analyze {s} error: {e}")


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# /ai ‚Äî —Ä–æ–∑–≥–æ—Ä–Ω—É—Ç–∏–π –ø–ª–∞–Ω (TA-–∫–æ–Ω—Ç–µ–∫—Å—Ç: EMA/MACD/RSI/ATR/OBV/MFI/ADX/CCI/Pivots)
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
AI_SYSTEM = (
    "You are a concise crypto trading assistant. "
    "Return STRICT JSON only (no prose) with keys exactly: "
    '{"direction":"LONG|SHORT|NEUTRAL","entry":number,"stop":number,"tp":number,'
    '"confidence":0..1,"holding_time_hours":number,"holding_time":"string",'
    '"rationale":"2-3 sentences"} '
    "Use only the provided trend/momentum/volatility/strength/volume/pivots data. "
    "Prefer ~1:3 risk-reward when reasonable."
)

async def ai(update: Update, context: ContextTypes.DEFAULT_TYPE):
    args = context.args or []
    raw = (args[0] if args else "").strip().upper()
    timeframe = (args[1] if len(args) > 1 else ANALYZE_TIMEFRAME).strip()

    if not raw:
        symbol = _pick_default_symbol()
    elif raw in _VALID_DIR_WORDS:
        await update.message.reply_text("‚ÑπÔ∏è –¶–µ —Å—Ö–æ–∂–µ –Ω–∞ *–Ω–∞–ø—Ä—è–º*, –∞ –Ω–µ —Å–∏–º–≤–æ–ª. –ü—Ä–∏–∫–ª–∞–¥: `/ai BTCUSDT`.")
        return
    elif not _looks_like_symbol(raw):
        await update.message.reply_text("‚ö†Ô∏è –ù–µ–≤—ñ—Ä–Ω–∏–π —Å–∏–º–≤–æ–ª. –ü—Ä–∏–∫–ª–∞–¥: `/ai BTCUSDT`.")
        return
    else:
        symbol = raw

    await update.message.reply_text(
        f"‚è≥ –†–∞—Ö—É—é —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏ –¥–ª—è {symbol} (TF={timeframe}, bars={ANALYZE_BARS}, mode={'COMPACT' if COMPACT_MODE else 'FULL'})‚Ä¶"
    )

    try:
        # 1) –î–∞–Ω—ñ —Ä–∏–Ω–∫—É (—Å–≤—ñ—á–∫–∏ + —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏)
        def _work():
            # –§–µ—Ç—á–∏–º–æ –∑ –∑–∞–ø–∞—Å–æ–º –ø–æ ANALYZE_LIMIT, –∞–ª–µ LLM-–∫–æ–Ω—Ç–µ–∫—Å—Ç—É –¥–∞–º–æ ANALYZE_BARS
            df = get_ohlcv(symbol, timeframe, ANALYZE_LIMIT)
            inds = get_ta_indicators(df)
            last = inds.iloc[-1]
            price = float(last.get("close", float("nan")))
            return inds, last, price
        inds, last, price = await asyncio.to_thread(_work)

        # 2) –í—ñ–∫–Ω–æ –¥–ª—è LLM: –æ—Å—Ç–∞–Ω–Ω—ñ ANALYZE_BARS
        win = inds.tail(ANALYZE_BARS).copy()
        block: List[str] = []
        block.append(f"SYMBOL: {symbol}")
        block.append(f"TF: {timeframe}")
        block.append(f"PRICE_LAST: {price:.6f}")

        if COMPACT_MODE:
            # –°—Ç–∏—Å–ª–µ —Ä–µ–∑—é–º–µ –∫–ª—é—á–æ–≤–∏—Ö —Ñ—ñ—á
            ema50 = float(last.get('ema_50', last.get('EMA50', float('nan'))))
            ema200 = float(last.get('ema_200', last.get('EMA200', float('nan'))))
            rsi_avg = float(win['rsi'].mean()) if 'rsi' in win.columns else float('nan')
            macd = float(last.get('macd', last.get('MACD', float('nan'))))
            atr_avg = float(win['atr_14'].mean()) if 'atr_14' in win.columns else (float(win['ATR'].mean()) if 'ATR' in win.columns else float('nan'))
            adx = float(last.get('adx', last.get('ADX', float('nan'))))

            block += [
                f"EMA50_last: {ema50:.6f}",
                f"EMA200_last: {ema200:.6f}",
                f"RSI_avg_{ANALYZE_BARS}: {rsi_avg:.4f}",
                f"MACD_last: {macd:.6f}",
                f"ATR_avg_{ANALYZE_BARS}: {atr_avg:.6f}",
                f"ADX_last: {adx:.4f}",
            ]
        else:
            # –ü–æ–≤–Ω–∏–π –±–ª–æ–∫: –æ—Å–Ω–æ–≤–Ω—ñ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏ + –∫—ñ–ª—å–∫–∞ –æ—Å—Ü–∏–ª—è—Ç–æ—Ä—ñ–≤/–ø—ñ–≤–æ—Ç—ñ–≤
            # –¢—Ä–µ–Ω–¥
            block.append(f"EMA50_last: {float(last.get('ema_50', last.get('EMA50', float('nan')))):.6f}")
            block.append(f"EMA200_last: {float(last.get('ema_200', last.get('EMA200', float('nan')))):.6f}")

            # MACD/Signal
            block.append(f"MACD_last: {float(last.get('macd', last.get('MACD', float('nan')))):.6f}")
            block.append(f"MACD_SIGNAL_last: {float(last.get('macd_signal', last.get('MACD_SIGNAL', float('nan')))):.6f}")

            # RSI / StochRSI —Å–µ—Ä–µ–¥–Ω—î/–æ—Å—Ç–∞–Ω–Ω—î
            rsi_col = 'rsi' if 'rsi' in win.columns else ('RSI' if 'RSI' in win.columns else None)
            rsi_avg = float(win[rsi_col].mean()) if rsi_col else float('nan')
            block.append(f"RSI_avg_{ANALYZE_BARS}: {rsi_avg:.4f}")
            block.append(f"StochRSI_K_last: {float(last.get('stochrsi_k', last.get('STOCHRSI_K', float('nan')))):.4f}")
            block.append(f"StochRSI_D_last: {float(last.get('stochrsi_d', last.get('STOCHRSI_D', float('nan')))):.4f}")

            # –í–æ–ª–∞—Ç–∏–ª—å–Ω—ñ—Å—Ç—å
            atr_col = 'atr_14' if 'atr_14' in win.columns else ('ATR' if 'ATR' in win.columns else None)
            atr_avg = float(win[atr_col].mean()) if atr_col else float('nan')
            pctb = float(last.get('pct_b', last.get('PCTB', float('nan'))))
            block.append(f"ATR_avg_{ANALYZE_BARS}: {atr_avg:.6f}")
            block.append(f"BB_pctB_last: {pctb:.4f}")

            # –û–± º—î–º/—Å–∏–ª–∞
            if 'obv' in last or 'OBV' in last:
                block.append(f"OBV_last: {float(last.get('obv', last.get('OBV', 0.0))):.0f}")
            if 'mfi' in last or 'MFI' in last:
                block.append(f"MFI_last: {float(last.get('mfi', last.get('MFI', float('nan')))):.4f}")
            block.append(f"ADX_last: {float(last.get('adx', last.get('ADX', float('nan')))):.4f}")
            block.append(f"CCI_last: {float(last.get('cci', last.get('CCI', float('nan')))):.4f}")

            # –ü—ñ–≤–æ—Ç–∏ (–∑–≤–∏—á–∞–π–Ω—ñ + Fib, —è–∫—â–æ —î)
            for key in ["pivot", "r1", "s1", "r2", "s2", "r3", "s3",
                        "fib_pivot", "fib_r1", "fib_s1", "fib_r2", "fib_s2", "fib_r3", "fib_s3"]:
                if key in last.index:
                    try:
                        block.append(f"{key.upper()}: {float(last.get(key, float('nan'))):.6f}")
                    except Exception:
                        pass

        market_block = "\n".join(block)

        # 3) Prompt –¥–ª—è –®–Ü
        prompt = (
            f"{market_block}\n\n"
            "Decide if there is a trade now. Return STRICT JSON only (no prose) with keys exactly:\n"
            '{"direction":"LONG|SHORT|NEUTRAL","entry":number,"stop":number,"tp":number,'
            '"confidence":0..1,"holding_time_hours":number,"holding_time":"string","rationale":"2-3 sentences"}.\n'
            "Use trend (EMAs), momentum (MACD/RSI/StochRSI), volatility (ATR/BB), strength (ADX/CCI), volume (OBV/MFI), and Pivots."
        )
        raw = chat([{"role":"system","content":AI_SYSTEM},{"role":"user","content":prompt}])
        plan = _parse_ai_json(raw)

        # 4) –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è + holding time
        direction = (plan.get("direction") or "").upper()
        entry = float(plan.get("entry", math.nan))
        stop = float(plan.get("stop", math.nan))
        tp   = float(plan.get("tp", math.nan))
        conf = float(plan.get("confidence", 0.0))

        # RR-—Ñ—ñ–ª—å—Ç—Ä: —è–∫—â–æ < 1.5 ‚Äî —Å–∫—ñ–ø–∞—î–º–æ
        rr_text = _rr(direction, entry, stop, tp)
        try:
            if rr_text != "-" and float(rr_text) < 1.5:
                await update.message.reply_text("‚ö†Ô∏è –°–ª–∞–±–∫–∏–π —Å–∏–≥–Ω–∞–ª (RR < 1.5) ‚Äî —Å–∫—ñ–ø.")
                return
        except Exception:
            pass  # —è–∫—â–æ rr –Ω–µ —Ä–æ–∑–ø–∞—Ä—Å–∏–≤—Å—è ‚Äî –Ω–µ –±–ª–æ–∫—É—î–º–æ, –∞–ª–µ –ø–æ–∫–∞–∂–µ–º–æ —è–∫ "-"

        # –û–±—á–∏—Å–ª–µ–Ω–Ω—è holding time
        hold_source = "AI"
        hold_h = float(plan.get("holding_time_hours", 0.0))
        if hold_h <= 0.0:
            hold_source = "heuristic"
            # –æ—Ü—ñ–Ω–∏–º–æ —à–≤–∏–¥–∫—ñ—Å—Ç—å –∑–∞ ATR% (–±–µ—Ä–µ–º–æ —Å–µ—Ä–µ–¥–Ω—î –ø–æ –≤—ñ–∫–Ω—É)
            try:
                atr_col = 'atr_14' if 'atr_14' in win.columns else ('ATR' if 'ATR' in win.columns else None)
                atr_avg = float(win[atr_col].mean()) if atr_col else 0.0
                atr_pct = (atr_avg / float(price) * 100.0) if price and atr_avg == atr_avg else 0.0
            except Exception:
                atr_pct = 0.0
            base_hours = max(1, _tf_minutes(timeframe) / 15 * 2)
            if atr_pct >= 2.0:   speed_adj = 0.5
            elif atr_pct >= 1.0: speed_adj = 0.75
            elif atr_pct <= 0.2: speed_adj = 1.5
            else:                speed_adj = 1.0
            hold_h = float(int(round(base_hours * speed_adj)))

        if direction == "NEUTRAL":
            entry = stop = tp = float("nan")

        # 5) –í–∏–≤—ñ–¥ —ñ–∑ TZ_NAME + —á–∞—Å –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó
        tz = ZoneInfo(TZ_NAME)
        now_local = datetime.now(tz)
        hold_until_local = now_local + timedelta(hours=hold_h) if hold_h > 0 else None
        hold_line = (
            f"Recommended hold: {int(round(hold_h))} h ({hold_source})"
            + (f" (–¥–æ {hold_until_local.strftime('%Y-%m-%d %H:%M %Z')} / {TZ_NAME})" if hold_until_local else "")
        )
        stamp_line = f"Generated: {now_local.strftime('%Y-%m-%d %H:%M %Z')}"

        reply = (
            f"ü§ñ AI –ø–ª–∞–Ω –¥–ª—è {symbol} (TF={timeframe})\n"
            f"–ú–æ–¥–µ–ª—å: {_current_ai_model()}\n"
            f"{stamp_line}\n"
            f"Direction: {direction or '-'}   | Confidence: {conf:.2f}   | RR: {rr_text}\n"
            f"Entry: {_fmt_or_dash(entry)}    | SL: {_fmt_or_dash(stop)}   | TP: {_fmt_or_dash(tp)}\n"
            f"{hold_line}\n"
            "‚Äî –ø–æ—è—Å–Ω–µ–Ω–Ω—è ‚Äî\n"
            f"{plan.get('rationale','‚Äî')}"
        )
        await update.message.reply_text(reply)

    except Exception as e:
        log.exception("/ai failed")
        await update.message.reply_text(f"‚ö†Ô∏è ai error: {e}")


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# Callback stub (–Ω–∞ –º–∞–π–±—É—Ç–Ω—î)
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def on_cb_detail(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        await update.callback_query.answer("Soon‚Ñ¢")
    except Exception:
        pass
